9. Интернет - сеть протоколов tcp ip

10. Служба Интернет - программная реализация протокола сетевого уровня, примеры: dns, smtp, pop3, dhcp,imap, www, ftp ,telnet, ssh



11. Узел сети Интернет - это устройство имеющее ip адрес и подключение к интернету

12. Клиент-серверное приложение - это программная архитектура, в которой клиент (обычно пользовательский интерфейс) делает запросы к серверу,
 а сервер отвечает, предоставляя необходимую информацию или услуги.

Дуплексная - в обе стороны можно отправлять
Полудуплесная - только в одну сторону
Симплексная - односторонняя связь


13. Сетевой протокол - это набор правил и стандартов, которые определяют, как данные передаются и получаются через сетевые соединения.

14. Основные свойства протокола HTTP:
версии: 1.1, 1.2, 1.3(в разработке)
Безсостояние (stateless): каждый запрос от клиента к серверу рассматривается как новый.
Основан на TCP/IP.
Поддерживает методы запросов, такие как GET, POST, PUT, DELETE.
Прост в использовании и расширяем.
15. Информация, пересылаемая в HTTP-запросе:

Метод запроса (например, GET или POST).
URL.
Версия HTTP.
Заголовки (например, User-Agent, Accept).
Тело запроса (не всегда присутствует).
16. Информация, пересылаемая в HTTP-ответе:

Статус-код (например, 200 OK или 404 Not Found).
Версия HTTP.
Заголовки ответа (например, Server, Content-Type).
Тело ответа.
17. Группы заголовков HTTP:

Общие заголовки (General headers) — например, Date, Cache-Control.
Заголовки запроса (Request headers) — например, Accept, User-Agent.
Заголовки ответа (Response headers) — например, Server, WWW-Authenticate.
Заголовки сущности (Entity headers) — например, Content-Type, Content-Length.
18. Web-приложение - это приложение, доступное через веб-браузер посредством сети.

19.

Frontend - это часть приложения, ответственная за интерфейс и взаимодействие с пользователем.
Backend - это серверная часть приложения, обеспечивающая логику, обработку данных и взаимодействие с базами данных.
20. Кроссплатформенное приложение - это программное обеспечение, разработанное для работы на нескольких платформах или операционных системах.

21. Общая схема web-приложения: пользовательский интерфейс (frontend) взаимодействует с сервером (backend) посредством HTTP-запросов.
 Сервер обрабатывает эти запросы, может обращаться к базе данных и возвращает результаты обратно на frontend.

22. Основные технологии разработки серверных кроссплатформенных приложений: Node.js, .NET Core, Java (Spring), Python (Flask, Django), Ruby on Rails, Go.

23. Асинхронная операция - это операция, которая выполняется параллельно с основным потоком выполнения,
 что позволяет основному потоку продолжать выполнение без ожидания завершения этой операции.

24. Основное назначение NODE.JS: Node.js - это среда выполнения JavaScript, позволяющая выполнять код на стороне сервера.
 Она используется для создания масштабируемых серверных приложений.

25. Основные свойства NODE.JS:

Основан на V8 JavaScript Engine от Google.
Асинхронное и событийно-ориентированное программирование.
Быстрое выполнение кода.
Большой экосистемой пакетов (npm).
Кроссплатформенность.


_________________________________________________________________

19. Асинхронный запрос — это запрос, отправляемый из браузера на сервер без перезагрузки всей страницы.
 Это позволяет обновлять части страницы без необходимости загружать её целиком.

20. AJAX (Asynchronous JavaScript and XML) — это технология, позволяющая веб-приложениям делать асинхронные запросы к серверу,
 обмениваясь данными в формате XML, JSON или других форматах, и динамически обновлять контент на странице без полной её перезагрузки.

21. HTTP-заголовок Content-Type указывает на медиатип содержимого тела сообщения. Он используется, чтобы определить,
 в каком формате представлены данные (например, text/html для HTML-документов или application/json для данных в формате JSON).

22. Функция require в Node.js используется для импорта модулей или библиотек. Она позволяет загружать и использовать внешние модули или файлы в текущем файле или модуле.

23. Модуль Node.js — это отдельный файл или пакет файлов, содержащий функции или объекты, 
которые можно импортировать и использовать в других файлах с помощью функции require.

24. Node.js built-in modules (или Node.js Core modules) — это модули, включенные в стандартную поставку Node.js,
 и они доступны для использования без дополнительной установки. Примеры таких модулей: fs (работа с файловой системой),
 http (работа с протоколом HTTP), url (анализ URL) и многие другие.

25. В Node.js модуль HTTP предоставляет функциональность для работы с протоколом HTTP, позволяя создавать HTTP-серверы или делать HTTP-запросы.
 Модуль fs обеспечивает работу с файловой системой, позволяя читать, писать, удалять файлы и т. д.

26. npm (Node Package Manager) — это менеджер пакетов для JavaScript, который используется для установки,
 управления и разделения библиотек и зависимостей в проектах на Node.js.








службы какие бывают, интернет. версии http чем отличаются, 